<script setup lang="ts">
import { computed, reactive,#if($inputNumberColumns.size() > 0 ) ref,#end watch } from 'vue';
import {#if($validateColumns.size() > 0) useFormRules,#end useNaiveForm } from '@/hooks/common/form';
#set( $t = '$t' )
import { $t } from '@/locales';
import { add${className}, edit${className} } from '@/service/api';
import { debounceAsync } from '@/utils/debounce-util';
#if($uploadColumns.size() > 0 )
import FileUpload from '@/components/custom/file-upload.vue';
#end
#if($imageUploadColumns.size() > 0 )
import ImageUpload from '@/components/custom/image-upload.vue';
#end
defineOptions({
  name: '${className}OperateModal'
});

/**
 * 父组件传递参数
 */
interface Props {
  /** 操作类型 */
  operateType: NaiveUI.TableOperateType;
  /** 编辑数据 */
  rowData?: ${className}Api.${className} | null;
#if($formDictColumns.length() > 0 )
  /** 字典Map */
  dictMap: Record<string, DictApi.Dict[]>;
#end
}

/**
 * 调用父组件传递参数
 */
const props = defineProps<Props>();

/**
 * 父组件方法
 */
interface Emits {
  (e: 'submitted'): void;
}

/**
 * 调用父组件方法
 */
const emit = defineEmits<Emits>();

/**
 * 弹窗显隐
 */
const visible = defineModel<boolean>('visible', {
  default: false
});

/**
 * 表单配置
 *
 * - "formRef": 表单Ref
 * - "validate": 表单校验
 * - "restoreValidation": 重置表单校验
 * - "resetModel": 重置model的所有Key为Null
 */
const { formRef, validate, restoreValidation, resetModel } = useNaiveForm();

#if($validateColumns.size() > 0)
/**
 * 校验规则
 */
const {#if(${hasNotNull}) defaultRequiredRule, #end#if(${hasCheckLength}) maxLengthRule#end } = useFormRules();

#end
/**
 * 弹窗标题
 */
const title = computed(() => {
  const titles: Record<NaiveUI.TableOperateType, string> = {
    add: $t('page.#if($hasMenu)${menu.routeName}.#end${classname}.add${className}'),
    view: $t('page.#if($hasMenu)${menu.routeName}.#end${classname}.view${className}'),
    edit: $t('page.#if($hasMenu)${menu.routeName}.#end${classname}.edit${className}')
  };
  return titles[props.operateType];
});

/**
 * 模型类型
 */
type Model = Pick<${className}Api.${className}, #foreach($column in $formColumns)'${column.attrName}'#if($foreach.hasNext) | #end#end#if($uploadColumns.size() > 0 && $formColumns.size() > 0) | #end#foreach($uploadColumn in $uploadColumns)'${uploadColumn.attrName}'#if($foreach.hasNext) | #end#end>;

/**
 * 表单模型
 */
const model: Model = reactive(createDefaultModel());

/**
 * 初始化模型
 */
function createDefaultModel(): Model {
  return {
#foreach ($column in $formColumns)
    ${column.attrName}: null#if($foreach.hasNext),
#else
#if($uploadColumns.size() == 0)

#end
#end
#end#if($formColumns.size() > 0 && $uploadColumns.size() > 0),
#end
#foreach($uploadColumn in $uploadColumns)
    ${uploadColumn.attrName}: null#if($foreach.hasNext),
#else

#end
#end
  };
}

/**
 * 表单校验字段的key
 */
type RuleKey = Exclude<keyof Model, #foreach ($column in $unValidateColumns) '${column.attrName}'#if($foreach.hasNext) | #end#end#if($uploadColumns.size() > 0 && $unValidateColumns.size() > 0) | #end#foreach($uploadColumn in $uploadColumns)'${uploadColumn.attrName}'#if($foreach.hasNext) | #end#end>;

/**
 * 表单校验规则
 */
const rules: Record<RuleKey, App.Global.FormRule | App.Global.FormRule[]> = #if($validateColumns.size() == 0){}#else{
#foreach ($column in $validateColumns)
  ${column.attrName}: [#if($column.isNotNull == "1")defaultRequiredRule#if($column.isCheckLength), #end#end#if($column.isCheckLength)maxLengthRule(${column.columnLength})#end]#if($foreach.hasNext),
#else

#end
#end
};
#end

#if($inputNumberColumns.size() > 0)
/** 数字输入框字段特殊处理 */
#foreach($column in $inputNumberColumns)
const ${column.attrName}InputNumber = ref<number | null>(null);
#end
#end
#if($inputNumberColumns.size() > 0)

#end

/**
 * 渲染模型
 */
function handleInitModel() {
  resetModel(model);
  Object.assign(model, createDefaultModel());
  if (props.operateType !== 'add' && props.rowData) {
    Object.assign(model, props.rowData);
#foreach($column in $inputNumberColumns)
    if (model.${column.attrName}) {
      ${column.attrName}InputNumber.value = Number(model.${column.attrName});
    }
#end
  }
}

/**
 * 关闭弹窗
 */
function close() {
  visible.value = false;
}

/**
 * 防抖
 */
const submit = debounceAsync(() => handleSubmit(), 200);

/**
 * 表单提交
 */
async function handleSubmit() {
  await validate();
  let success;
  if (props.operateType === 'add') {
    const { error } = await add${className}(model);
    success = !error;
  } else {
    const { error } = await edit${className}(model);
    success = !error;
  }
  if (success) {
    window.$message?.success($t(props.operateType === 'add' ? 'common.addSuccess' : 'common.modifySuccess'));
    close();
    emit('submitted');
  }
}

#if($uploadColumns.size() > 0 )
/**
 * 文件上传回调
 *
 * @param column 字段名称
 * @param ids 文件列表IDS
 */
function fileChange<KEY extends keyof Model>(column: KEY, ids: string[]) {
  if (typeof model[column] === 'string') {
    model[column] = ids.join(',') as Model[KEY];
  }
}

#end
/**
 * watch监听
 */
watch(visible, () => {
  if (visible.value) {
    handleInitModel();
    restoreValidation();
  }#if($inputNumberColumns.size() > 0 )else{
#foreach($column in $inputNumberColumns)
    ${column.attrName}InputNumber.value = null
#end
  }
#end
});
</script>

<template>
  <NDrawer v-model:show="visible" display-directive="show" width="60%">
    <NDrawerContent :title="title" :native-scrollbar="false" closable>
      <NForm ref="formRef" :model="model" :rules="rules" label-placement="left" :label-width="100">
        <NGrid responsive="screen" item-responsive>
#foreach ($column in $formColumns)
#set($label = "$t('page.#if($hasMenu)${menu.routeName}.#end${classname}.${column.attrName}')")
#set($placeholder = "$t('page.#if($hasMenu)${menu.routeName}.#end${classname}.form.${column.attrName}')")
           <NFormItemGi span="24 m:24" :label="${label}" path="${column.attrName}">
#if($column.components == "INPUT")
             <NInput v-model:value="model.${column.attrName}" :placeholder="${placeholder}" clearable />
#elseif($column.components == "INPUT-NUMBER")
#if($column.isNumber)
             <NInputNumber v-model:value="model.${column.attrName}" class="w-full" :placeholder="${placeholder}" clearable />
#else
             <NInputNumber
               v-model:value="${column.attrName}InputNumber"
               class="w-full"
               :placeholder="${placeholder}"
               clearable
               @update:value="val => {
                 model.${column.attrName} = val ? val.toString() : null;
               }"
             />
#end
#elseif($column.components == "TEXTAREA")
             <NInput
                v-model:value="model.${column.attrName}"
                type="textarea"
                show-count
                :autosize="{
                  minRows: 5
                }"
                :placeholder="${placeholder}"
                clearable
             />
#elseif($column.components == "SELECT")
             <NSelect
                v-model:value="model.${column.attrName}"
                filterable
                clearable
#if($column.dictCode)
                label-field="dictName"
                value-field="dictValue"
                :options="props.dictMap.${column.dictCode}"
#else
                :options="[]"
#end
                :placeholder="${placeholder}"
             />
#elseif($column.components == "CASCADER")
             <NCascader
                v-model:value="model.${column.attrName}"
#if($column.dictCode)
                label-field="dictName"
                value-field="dictValue"
                :options="props.dictMap.${column.dictCode}"
#else
                :options="[]"
#end
                show-path
                clearable
                filterable
                :placeholder="${placeholder}"
             />
#elseif($column.components == "TREE-SELECT")
             <NTreeSelect
                v-model:value="model.${column.attrName}"
                :placeholder="${placeholder}"
                checkable
                clearable
                filterable
#if($column.dictCode)
                label-field="dictName"
                key-field="dictValue"
                :options="props.dictMap.${column.dictCode}"
#else
                :options="[]"
#end
             />
#elseif($column.components == "CHECKBOX")
             <SmartCheckbox
                v-model:value="model.${column.attrName}"
#if($column.dictCode)
                :options="props.dictMap.${column.dictCode}"
                :field-name="{ key: 'id', value: 'dictValue', label: 'dictName' }"
#end
             />
#elseif($column.components == "RADIO")
             <NRadioGroup v-model:value="model.${column.attrName}">
#if($column.dictCode)
               <NRadio
                 v-for="item in props.dictMap.${column.dictCode}"
                 :key="item.id || ''"
                 :value="item.dictValue || ''"
                 :label="item.dictName || ''"
               />
#else
               <NRadio value="" label="" />
#end
             </NRadioGroup>
#elseif($column.components == "DATEPICKER")
             <NDatePicker
               v-model:formatted-value="model.${column.attrName}"
               value-format="yyyy-MM-dd HH:mm:ss"
               class="w-100%"
               :placeholder="${placeholder}"
               type="datetime"
               clearable
             />
#elseif($column.components == "TIMEPICKER")
             <NTimePicker
               v-model:formatted-value="model.${column.attrName}"
               value-format="HH:mm:ss"
               class="w-100%"
               :placeholder="${placeholder}"
               clearable
             />
#elseif($column.components == "SWITCH")
             <NSwitch :value="model.${column.attrName} === '1'" @update:value="val => { model.${column.attrName} = val ? '1' : '0' }" />
#elseif($column.components == "FILE-UPLOAD")
#foreach ($uploadColumn in $uploadColumns)
#if($uploadColumn.columnName == $column.columnName)
             <FileUpload
               :file-data="model.${uploadColumn.attrName}"
               @file-change="(ids) => fileChange('${column.attrName}', ids)"
             />
#end
#end
#elseif($column.components == "IMAGE-UPLOAD")
             <ImageUpload v-model:file-urls="model.${column.attrName}"/>
#elseif($column.components == "EDITOR")
             <AiEditor v-model:content="model.${column.attrName}" />
#end
           </NFormItemGi>
#end
        </NGrid>
      </NForm>
      <template #footer>
        <NSpace justify="end" :size="16">
          <NButton @click="close">{{ $t('common.close') }}</NButton>
          <NButton v-if="operateType !== 'view'" type="primary" @click="submit()">{{ $t('common.save') }}</NButton>
        </NSpace>
      </template>
    </NDrawerContent>
  </NDrawer>
</template>

<style scoped></style>
