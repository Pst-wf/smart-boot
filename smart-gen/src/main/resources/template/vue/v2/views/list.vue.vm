<template>
  <page-header-wrapper>
    <a-card :bordered="false">
      <div class="table-page-search-wrapper">
        <a-form layout="inline">
            <a-row :gutter="48">
#foreach ($column in $queryColumns)
#if(${velocityCount} == 3)
            <template v-if="advanced">
#end
            <a-col :md="4" :sm="24">
                <a-form-item label="${column.comments}">
#if($column.components == "INPUT")
                <a-input v-model="queryParam.${column.attrName}" placeholder="请输入${column.comments}"/>
#elseif($column.components == "INPUT-NUMBER")
                <a-input-number v-model="queryParam.${column.attrName}" placeholder="请输入${column.comments}"/>
#elseif($column.components == "SELECT")
                <a-select allowClear showSearch optionFilterProp="label" placeholder="请选择${column.comments}" v-model="queryParam.${column.attrName}">
#if($column.dictCode)
                    <a-select-option v-for="(value, key) in dictMap['${column.dictCode}']" :key="key" :label="value">{{ value }}</a-select-option>
#end
                </a-select>
#elseif($column.components == "DATEPICKER")
                <date-string-picker
                    v-model="queryParam.${column.attrName}"
                    placeholder="请选择${column.comments}"
                    style="display: block"
                    :trigger-change="false"
                />
#end
                </a-form-item>
            </a-col>
#if(${velocityCount} > 2 && ${velocityCount} == ${queryColumns.size()})
            </template>
#end
#end
            <span class="table-page-search-submitButtons" style="display: inline-block;padding-left: 24px;">
                <a-button type="primary" @click="$refs.table.refresh(true)">查询</a-button>
                <a-button style="margin-left: 8px" @click="resetSearchForm">重置</a-button>
            </span>
            </a-row>
        </a-form>
      </div>

      <div class="table-operator">
        <a-button v-if="!permissions || permissions.indexOf('${pathName}:add') > -1" type="primary" icon="plus" @click="add">新建</a-button>
        <a-dropdown v-if="selectedRowKeys.length > 0">
            <a-menu slot="overlay">
                <a-menu-item v-if="!permissions || permissions.indexOf('${pathName}:delete') > -1" key="1" @click="remove(null)" ><a-icon type="delete" />删除</a-menu-item>
            </a-menu>
            <a-button style="margin-left: 8px">批量操作 <a-icon type="down" /></a-button>
        </a-dropdown>
      </div>
      <my-table
        ref="table"
        size="default"
        rowKey="id"
        :columns="columns"
        :data="loadData"
        :rowSelection="rowSelection"
        showPagination="true"
      >
        <span slot="serial" slot-scope="text, record, index">
          {{ index + 1 }}
        </span>
#foreach ($column in $listColumns)
#if($column.dictCode)
        <span slot="${column.attrName}" slot-scope="text">
          <a-tag :color="text === '1' ? 'blue' : 'red'">
            {{ dictMap['$column.dictCode'] === undefined ? '': dictMap['$column.dictCode'][text] }}
          </a-tag>
        </span>
#end
#end
        <span slot="action" slot-scope="text, record">
          <template>
            <a class="btnCss" @click="edit(record, true)">查看</a>
            <a v-if="!permissions || permissions.indexOf('${pathName}:update') > -1" class="btnCss" @click="edit(record, false)">编辑</a>
            <a-popconfirm title="请确认是否删除？" @confirm="() => remove(record)">
              <a v-if="!permissions || permissions.indexOf('${pathName}:delete') > -1" class="btnCss">删除</a>
            </a-popconfirm>
          </template>
        </span>
      </my-table>
      <my-form
        ref="createModal"
        :visible="visible"
        :loading="confirmLoading"
        :model="mdl"
        @cancel="handleCancel"
        @ok="handleOk"
      />
    </a-card>
  </page-header-wrapper>
</template>

<script>
#if(${hasQueryDate})
import DateStringPicker from '@/components/DateStringPicker/index.vue'
#end
import { MyTable, Ellipsis } from '@/components'
import { get${className}Page, save, update, remove, getOne } from '@/api/${classnameLowerCase}'
import MyForm from '@/views/${classnameLowerCase}/form'
#if(${listDictColumns} && ${listDictColumns.length()} > 0)
import { initDict } from '@/utils/dictUtil'
#end
// import { exportFile } from '@/utils/exportFile'

const columns = [
  {
      title: '序号',
      scopedSlots: { customRender: 'serial' }
  },
#foreach ($column in $listColumns)
#if($column.dictCode)
  {
    title: '${column.comments}',
    dataIndex: '${column.attrName}',
    scopedSlots: { customRender: '${column.attrName}' },
    sorter: true
  },
#else
  {
    title: '${column.comments}',
    dataIndex: '${column.attrName}',
    sorter: true
  },
#end
#end
  {
    title: '操作',
    width: '250px',
    scopedSlots: { customRender: 'action' }
  }
]

export default {
  name: '${className}List',
  components: {
    Ellipsis,
    MyTable,
    MyForm
  },
  data () {
    this.columns = columns
    return {
#if(${listDictColumns} && ${listDictColumns.length()} > 0)
      dictMap: {},
#end
      visible: false,
      confirmLoading: false,
      mdl: null,
      // 查询参数
      queryParam: {},
      // 加载数据方法 必须为 Promise 对象
      loadData: parameter => {
        const requestParameters = Object.assign({}, parameter, this.queryParam)
        return get${className}Page(requestParameters)
                .then(res => {
                  return res.result
                })
      },
      selectedRowKeys: [],
      selectedRows: [],
      permissions: []
    }
  },
  created () {
    this.permissions = this.$route.meta.permission
#if(${listDictColumns} && ${listDictColumns.length()} > 0)
    this.dictMap = initDict('${listDictColumns}')
#end
  },
  computed: {
    rowSelection () {
      return {
        selectedRowKeys: this.selectedRowKeys,
        onChange: this.onSelectChange
      }
    }
  },
  methods: {
    // 新增
    add () {
      this.mdl = {}
      this.$refs.createModal.isRead = false
      this.visible = true
    },
    // 编辑
    edit (record, isRead) {
      getOne({ id: record.id })
          .then(res => {
            this.mdl = res.result.data
            this.$refs.createModal.isRead = isRead
            this.visible = true
          })
    },
    // 删除
    remove (record) {
      let deleteIds = []
      if (record) {
        deleteIds = [record.id]
      } else {
        // 批量删除
        deleteIds = this.selectedRowKeys
      }
      remove({ deleteIds: deleteIds })
          .then(res => {
            this.$refs.table.refresh()
            this.$message.info('删除成功')
          })
    },
    // 编辑开启
    handleOk () {
      const form = this.$refs.createModal.form
      this.confirmLoading = true
      form.validateFields((errors, values) => {
        if (!errors) {
          if (values.id) {
            // 修改 e.g.
            update(values)
                .then(res => {
                  this.visible = false
                  this.confirmLoading = false
                  // 重置表单数据
                  form.resetFields()
                  // 刷新表格
                  this.$refs.table.refresh()
                  this.$message.info('修改成功')
                })
                .finally(() => {
                  this.confirmLoading = false
                })
          } else {
            // 新增
            save(values)
                .then(res => {
                  this.visible = false
                  this.confirmLoading = false
                  // 重置表单数据
                  form.resetFields()
                  // 刷新表格
                  this.$refs.table.refresh()
                  this.$message.info('新增成功')
                })
                .finally(() => {
                  this.confirmLoading = false
                })
          }
        } else {
          this.confirmLoading = false
        }
      })
    },
    // 编辑关闭
    handleCancel () {
      this.visible = false
      const form = this.$refs.createModal.form
      form.resetFields() // 清理表单数据（可不做）
    },
    // 批量选择
    onSelectChange (selectedRowKeys, selectedRows) {
      this.selectedRowKeys = selectedRowKeys
      this.selectedRows = selectedRows
    },
    // 重置筛选项
    resetSearchForm () {
      this.queryParam = {}
      this.$refs.table.refresh(true)
    }
  }
}
</script>
